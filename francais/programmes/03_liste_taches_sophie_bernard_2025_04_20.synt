#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Gestionnaire de recettes de cuisine
# Auteur: Sophie Bernard
# Date: 2025-04-20

import datetime

# Liste globale de recettes
recettes = []

definir ajouter_recette(nom, ingredients, instructions, temps_preparation, difficulte="moyenne", categorie="plat"):
    recette = {
        "id": longueur(recettes) + 1,
        "nom": nom,
        "ingredients": ingredients,
        "instructions": instructions,
        "temps_preparation": temps_preparation,
        "difficulte": difficulte,
        "categorie": categorie,
        "date_creation": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "favori": faux
    }
    recettes.append(recette)
    afficher(f"Recette ajout√©e: {nom}")
    retourner recette["id"]

definir afficher_recettes():
    si longueur(recettes) == 0:
        afficher("Aucune recette dans la collection")
        retourner
    
    afficher("\n=== COLLECTION DE RECETTES ===")
    pour recette dans recettes:
        favori = "‚≠ê" si recette["favori"] sinon "  "
        difficulte_emoji = {"facile": "üü¢", "moyenne": "üü°", "difficile": "üî¥"}
        emoji = difficulte_emoji.get(recette["difficulte"], "‚ö™")
        afficher(f"{favori} [{emoji}] {recette['nom']} - {recette['categorie']}")
        afficher(f"   Temps: {recette['temps_preparation']} min | Difficult√©: {recette['difficulte']}")

definir voir_recette(id_recette):
    pour recette dans recettes:
        si recette["id"] == id_recette:
            afficher(f"\n=== {recette['nom'].upper()} ===")
            afficher(f"Cat√©gorie: {recette['categorie']}")
            afficher(f"Temps de pr√©paration: {recette['temps_preparation']} minutes")
            afficher(f"Difficult√©: {recette['difficulte']}")
            afficher(f"Favori: {'Oui' si recette['favori'] sinon 'Non'}")
            
            afficher(f"\nIngr√©dients:")
            pour ingredient dans recette['ingredients']:
                afficher(f"  - {ingredient}")
            
            afficher(f"\nInstructions:")
            pour i, instruction dans enumerate(recette['instructions'], 1):
                afficher(f"  {i}. {instruction}")
            retourner
    afficher("Recette non trouv√©e")

definir rechercher_par_ingredient(ingredient):
    resultats = []
    pour recette dans recettes:
        pour ing in recette['ingredients']:
            si ingredient.lower() dans ing.lower():
                resultats.append(recette)
                rompre
    retourner resultats

definir filtrer_par_difficulte(difficulte):
    resultats = []
    pour recette dans recettes:
        si recette["difficulte"].lower() == difficulte.lower():
            resultats.append(recette)
    retourner resultats

definir marquer_favori(id_recette):
    pour recette dans recettes:
        si recette["id"] == id_recette:
            recette["favori"] = non recette["favori"]
            etat = "marqu√©e comme favori" si recette["favori"] sinon "retir√©e des favoris"
            afficher(f"Recette {etat}: {recette['nom']}")
            retourner
    afficher("Recette non trouv√©e")

definir supprimer_recette(id_recette):
    pour i, recette dans enumerate(recettes):
        si recette["id"] == id_recette:
            recette_supprimee = recettes.pop(i)
            afficher(f"Recette supprim√©e: {recette_supprimee['nom']}")
            retourner
    afficher("Recette non trouv√©e")

definir menu_recettes():
    tant_que vrai:
        afficher("\n=== GESTIONNAIRE DE RECETTES ===")
        afficher("1. Ajouter une recette")
        afficher("2. Voir toutes les recettes")
        afficher("3. Voir une recette sp√©cifique")
        afficher("4. Rechercher par ingr√©dient")
        afficher("5. Filtrer par difficult√©")
        afficher("6. Marquer/retirer des favoris")
        afficher("7. Supprimer une recette")
        afficher("8. Quitter")
        
        option = entree("Choisissez une option (1-8): ")
        
        si option == "1":
            nom = entree("Nom de la recette: ")
            afficher("Ingr√©dients (entrez 'fin' pour terminer):")
            ingredients = []
            tant_que vrai:
                ingredient = entree("Ingr√©dient: ")
                si ingredient.lower() == "fin":
                    rompre
                ingredients.append(ingredient)
            
            afficher("Instructions (entrez 'fin' pour terminer):")
            instructions = []
            tant_que vrai:
                instruction = entree("Instruction: ")
                si instruction.lower() == "fin":
                    rompre
                instructions.append(instruction)
            
            temps = entier(entree("Temps de pr√©paration (minutes): "))
            difficulte = entree("Difficult√© (facile/moyenne/difficile): ")
            categorie = entree("Cat√©gorie (entr√©e/plat/dessert/boisson): ")
            
            ajouter_recette(nom, ingredients, instructions, temps, difficulte, categorie)
            
        sinon_si option == "2":
            afficher_recettes()
        sinon_si option == "3":
            afficher_recettes()
            id_recette = entier(entree("ID de la recette √† voir: "))
            voir_recette(id_recette)
        sinon_si option == "4":
            ingredient = entree("Ingr√©dient √† rechercher: ")
            resultats = rechercher_par_ingredient(ingredient)
            si resultats:
                afficher(f"Recettes contenant '{ingredient}':")
                pour recette dans resultats:
                    afficher(f"- {recette['nom']}")
            sinon:
                afficher(f"Aucune recette trouv√©e avec '{ingredient}'")
        sinon_si option == "5":
            difficulte = entree("Difficult√© (facile/moyenne/difficile): ")
            resultats = filtrer_par_difficulte(difficulte)
            si resultats:
                afficher(f"Recettes de difficult√© '{difficulte}':")
                pour recette dans resultats:
                    afficher(f"- {recette['nom']}")
            sinon:
                afficher(f"Aucune recette trouv√©e avec difficult√© '{difficulte}'")
        sinon_si option == "6":
            afficher_recettes()
            id_recette = entier(entree("ID de la recette √† marquer/retirer: "))
            marquer_favori(id_recette)
        sinon_si option == "7":
            afficher_recettes()
            id_recette = entier(entree("ID de la recette √† supprimer: "))
            supprimer_recette(id_recette)
        sinon_si option == "8":
            afficher("Au revoir!")
            rompre
        sinon:
            afficher("Option invalide")

# Ajouter quelques recettes d'exemple
ajouter_recette(
    "Ratatouille",
    ["aubergines", "courgettes", "tomates", "poivrons", "oignons", "ail", "herbes de Provence"],
    ["Couper tous les l√©gumes en d√©s", "Faire revenir les oignons et l'ail", "Ajouter les l√©gumes par ordre de cuisson", "Laisser mijoter 30 minutes"],
    45,
    "facile",
    "plat"
)

ajouter_recette(
    "Cr√™pes Suzette",
    ["farine", "≈ìufs", "lait", "beurre", "sucre", "orange", "Grand Marnier"],
    ["Pr√©parer la p√¢te √† cr√™pes", "Faire cuire les cr√™pes", "Pr√©parer la sauce √† l'orange", "Flamber au Grand Marnier"],
    60,
    "difficile",
    "dessert"
)

# Ex√©cuter le programme
si __name__ == "__main__":
    menu_recettes()
