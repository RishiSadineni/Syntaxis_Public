#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Gestionnaire de playlist musicale
# Auteur: Emma Leroy
# Date: 2025-06-30

import datetime

# Base de données des chansons
chansons = []
# Base de données des playlists
playlists = []

definir ajouter_chanson(titre, artiste, album, duree, genre, annee):
    chanson = {
        "id": longueur(chansons) + 1,
        "titre": titre,
        "artiste": artiste,
        "album": album,
        "duree": duree,  # en secondes
        "genre": genre,
        "annee": annee,
        "date_ajout": datetime.datetime.now().strftime("%Y-%m-%d")
    }
    chansons.append(chanson)
    afficher(f"Chanson ajoutée: {titre} - {artiste}")

definir creer_playlist(nom, description=""):
    playlist = {
        "id": longueur(playlists) + 1,
        "nom": nom,
        "description": description,
        "chansons": [],
        "date_creation": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    playlists.append(playlist)
    afficher(f"Playlist créée: {nom}")

definir ajouter_chanson_playlist(id_playlist, id_chanson):
    # Trouver la playlist
    playlist_trouvee = faux
    pour playlist dans playlists:
        si playlist["id"] == id_playlist:
            playlist_trouvee = vrai
            # Vérifier si la chanson existe
            chanson_trouvee = faux
            pour chanson dans chansons:
                si chanson["id"] == id_chanson:
                    chanson_trouvee = vrai
                    # Vérifier si la chanson n'est pas déjà dans la playlist
                    si id_chanson non dans playlist["chansons"]:
                        playlist["chansons"].append(id_chanson)
                        afficher(f"Chanson ajoutée à la playlist: {chanson['titre']}")
                    sinon:
                        afficher("Cette chanson est déjà dans la playlist")
                    rompre
            si non chanson_trouvee:
                afficher("Chanson non trouvée")
            rompre
    
    si non playlist_trouvee:
        afficher("Playlist non trouvée")

definir afficher_chansons():
    si longueur(chansons) == 0:
        afficher("Aucune chanson dans la bibliothèque")
        retourner
    
    afficher("\n=== BIBLIOTHÈQUE MUSICALE ===")
    pour chanson dans chansons:
        minutes = chanson["duree"] // 60
        secondes = chanson["duree"] % 60
        afficher(f"[{chanson['id']}] {chanson['titre']} - {chanson['artiste']}")
        afficher(f"   Album: {chanson['album']} | Genre: {chanson['genre']} | Année: {chanson['annee']}")
        afficher(f"   Durée: {minutes}:{secondes:02d}")

definir afficher_playlists():
    si longueur(playlists) == 0:
        afficher("Aucune playlist créée")
        retourner
    
    afficher("\n=== PLAYLISTS ===")
    pour playlist dans playlists:
        duree_totale = 0
        pour id_chanson dans playlist["chansons"]:
            pour chanson dans chansons:
                si chanson["id"] == id_chanson:
                    duree_totale += chanson["duree"]
                    rompre
        
        minutes = duree_totale // 60
        secondes = duree_totale % 60
        afficher(f"[{playlist['id']}] {playlist['nom']} - {longueur(playlist['chansons'])} chansons")
        afficher(f"   Durée totale: {minutes}:{secondes:02d}")
        si playlist["description"]:
            afficher(f"   Description: {playlist['description']}")

definir voir_playlist(id_playlist):
    pour playlist dans playlists:
        si playlist["id"] == id_playlist:
            afficher(f"\n=== {playlist['nom'].upper()} ===")
            si playlist["description"]:
                afficher(f"Description: {playlist['description']}")
            afficher(f"Créée le: {playlist['date_creation']}")
            
            si longueur(playlist["chansons"]) == 0:
                afficher("Cette playlist est vide")
                retourner
            
            duree_totale = 0
            afficher(f"\nChansons ({longueur(playlist['chansons'])}):")
            pour i, id_chanson dans enumerate(playlist["chansons"], 1):
                pour chanson dans chansons:
                    si chanson["id"] == id_chanson:
                        minutes = chanson["duree"] // 60
                        secondes = chanson["duree"] % 60
                        duree_totale += chanson["duree"]
                        afficher(f"{i}. {chanson['titre']} - {chanson['artiste']} ({minutes}:{secondes:02d})")
                        rompre
            
            minutes_totales = duree_totale // 60
            secondes_totales = duree_totale % 60
            afficher(f"\nDurée totale: {minutes_totales}:{secondes_totales:02d}")
            retourner
    
    afficher("Playlist non trouvée")

definir rechercher_chansons(terme):
    resultats = []
    pour chanson dans chansons:
        si (terme.lower() dans chanson['titre'].lower() ou 
            terme.lower() dans chanson['artiste'].lower() or
            terme.lower() dans chanson['album'].lower() or
            terme.lower() dans chanson['genre'].lower()):
            resultats.append(chanson)
    retourner resultats

definir filtrer_par_genre(genre):
    resultats = []
    pour chanson dans chansons:
        si chanson["genre"].lower() == genre.lower():
            resultats.append(chanson)
    retourner resultats

definir statistiques():
    total_chansons = longueur(chansons)
    total_playlists = longueur(playlists)
    
    # Calculer la durée totale de toutes les chansons
    duree_totale = sum(chanson["duree"] pour chanson dans chansons)
    heures = duree_totale // 3600
    minutes = (duree_totale % 3600) // 60
    
    afficher("\n=== STATISTIQUES MUSICALES ===")
    afficher(f"Total des chansons: {total_chansons}")
    afficher(f"Total des playlists: {total_playlists}")
    afficher(f"Durée totale de la bibliothèque: {heures}h {minutes}min")
    
    # Genres les plus populaires
    genres = {}
    pour chanson dans chansons:
        genre = chanson["genre"]
        genres[genre] = genres.get(genre, 0) + 1
    
    si genres:
        afficher("\nGenres les plus populaires:")
        genres_populaires = sorted(genres.items(), key=lambda x: x[1], reverse=True)[:3]
        pour genre, count dans genres_populaires:
            afficher(f"  {genre}: {count} chansons")
    
    # Artistes les plus représentés
    artistes = {}
    pour chanson dans chansons:
        artiste = chanson["artiste"]
        artistes[artiste] = artistes.get(artiste, 0) + 1
    
    si artistes:
        afficher("\nArtistes les plus représentés:")
        artistes_populaires = sorted(artistes.items(), key=lambda x: x[1], reverse=True)[:3]
        pour artiste, count dans artistes_populaires:
            afficher(f"  {artiste}: {count} chansons")

definir menu_musique():
    tant_que vrai:
        afficher("\n=== GESTIONNAIRE DE PLAYLIST MUSICALE ===")
        afficher("1. Ajouter une chanson")
        afficher("2. Créer une playlist")
        afficher("3. Ajouter une chanson à une playlist")
        afficher("4. Voir toutes les chansons")
        afficher("5. Voir toutes les playlists")
        afficher("6. Voir une playlist spécifique")
        afficher("7. Rechercher des chansons")
        afficher("8. Filtrer par genre")
        afficher("9. Voir les statistiques")
        afficher("10. Quitter")
        
        option = entree("Choisissez une option (1-10): ")
        
        si option == "1":
            titre = entree("Titre de la chanson: ")
            artiste = entree("Artiste: ")
            album = entree("Album: ")
            duree_min = entier(entree("Durée (minutes): "))
            duree_sec = entier(entree("Durée (secondes): "))
            duree_totale = duree_min * 60 + duree_sec
            genre = entree("Genre: ")
            annee = entier(entree("Année: "))
            ajouter_chanson(titre, artiste, album, duree_totale, genre, annee)
            
        sinon_si option == "2":
            nom = entree("Nom de la playlist: ")
            description = entree("Description (optionnel): ")
            creer_playlist(nom, description)
            
        sinon_si option == "3":
            afficher_playlists()
            id_playlist = entier(entree("ID de la playlist: "))
            afficher_chansons()
            id_chanson = entier(entree("ID de la chanson: "))
            ajouter_chanson_playlist(id_playlist, id_chanson)
            
        sinon_si option == "4":
            afficher_chansons()
        sinon_si option == "5":
            afficher_playlists()
        sinon_si option == "6":
            afficher_playlists()
            id_playlist = entier(entree("ID de la playlist: "))
            voir_playlist(id_playlist)
        sinon_si option == "7":
            terme = entree("Terme de recherche: ")
            resultats = rechercher_chansons(terme)
            si resultats:
                afficher(f"Résultats pour '{terme}':")
                pour chanson dans resultats:
                    afficher(f"- {chanson['titre']} par {chanson['artiste']}")
            sinon:
                afficher(f"Aucune chanson trouvée pour '{terme}'")
        sinon_si option == "8":
            genre = entree("Genre à filtrer: ")
            resultats = filtrer_par_genre(genre)
            si resultats:
                afficher(f"Chansons du genre '{genre}':")
                pour chanson dans resultats:
                    afficher(f"- {chanson['titre']} par {chanson['artiste']}")
            sinon:
                afficher(f"Aucune chanson trouvée pour le genre '{genre}'")
        sinon_si option == "9":
            statistiques()
        sinon_si option == "10":
            afficher("Au revoir!")
            rompre
        sinon:
            afficher("Option invalide")

# Ajouter quelques chansons d'exemple
ajouter_chanson("La Vie en Rose", "Édith Piaf", "Chansons Parisiennes", 183, "Chanson française", 1947)
ajouter_chanson("Non, Je Ne Regrette Rien", "Édith Piaf", "Non, Je Ne Regrette Rien", 140, "Chanson française", 1960)
ajouter_chanson("Le Temps des Cerises", "Yves Montand", "Chansons Populaires", 165, "Chanson française", 1954)

# Créer une playlist d'exemple
creer_playlist("Chansons Françaises Classiques", "Les plus belles chansons françaises")

# Exécuter le programme
si __name__ == "__main__":
    menu_musique()
